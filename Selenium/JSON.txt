JSON - Java Script Object Notation:
-----------------------------------

Q. What is a JSON Object?
A. 
In JSON an object is represented by a collection of Key-Value pairs. This collection of Key-Value pairs are 
grouped using { } (opening and closing curly braces}. 

Rules to writing an Object are:
-------------------------------
* Key-Value pairs should be separated by a , (Comma)
* Each Object should Start with an Opening { (Opening Curly Brace)
* Each Object should End with a Closing } (Closing Curly Brace)

An example here is the Person Object. The Person object follows the rules mentioned for representing an Object.

{
 "FirstName" : "Virender",
 "LastName"  : "Singh",
 "Age"       : 34,
 "Profession": "Engineer"
}

{
 "FirstName" : "Virender",
 "LastName"  : "Shewag",
 "Age"       : 42,
 "Profession": "Ex-Cricketer"
}

===============================================================================================================================

Q. What is a JSON Array?
A. 
In JSON an Array is collection of Values separated by Comma. Here are the rules to write an Array

* An Array starts with an opening  [ (Bracket)
* An Array ends with a closing ] (Bracket)
* Values in the Array are separated by , (Comma)

{
 "FirstName" : "Virender",
 "LastName"  : "Singh",
 "Age"       : 34,
 "Profession": "Engineer",
 "Hobbies"   : ["Videos games", "Computers", "Music"]
}

See how multiple hobbies are represented using an Array. Array starts and ends with [ ] and contains values separated by ,.

Hence, JSON objects and JSON arrays are the two different componenets  of JSON.  Using these components, we can construct 
complex JSON.

===============================================================================================================================

Q. What is a JSONPath?
A. 
Every JSON object is composed on an inherent hierarchy and structure. 
Every JSON ends up creating a tree of nodes, where each node is a JSON Element.

Below is a simple JSON expressing a collection of countries:
{
  "Description": "Map containing Country, Capital, Currency, and some States of that Country",
  "Region": "Asia",
  "Countries": [
    {
      "Country": "India",
      "Data": {
        "Capital": "New Delhi",
        "mintemp": 6,
        "maxtemp": 45,
        "Currency": "Rupee"
      }
    },
    {
      "Country": "Nepal",
      "Data": {
        "Capital": "Katmandu",
        "mintemp": 9,
        "maxtemp": 23,
        "Currency": "Nepalese rupee"
      }
    }
  ]
}

At the top most level we have a Root node, which is basically the node containing all of the current JSON. 
Inside this root node we have following nodes:

* Description
* Region
* Countries

Description and Region are simple leaf nodes in the tree. 
But Countries is a non leaf node, which further contains more nodes. Here Countries node contains an array of two countries.

Note: Root node is represented by '$' and a relationship from parent to child is represented with '.'.

Description node will be represented by $.Description.
Region node will be represented by $.Region.

Similarly we can also define a relationship between the Root node and the zero’th item in the Countries array.
$..Countries[0]

This hierarchy in JSON allows us to create a standard mechanism to traverse through specific parts of the JSON. 
A standard way to do this is called JSONPath.

Note: https://goessner.net/articles/JsonPath/

===============================================================================================================================

Q. How to Query JSON with JSONPath?
A. 
JSONPath creates a uniform standard and syntax to define different parts of a JSON document. 
JSONPath defines expressions to traverse through a JSON document to reach to a subset of the JSON.

XPath	JSONPath		Description
------------------------------------------------------
/			$	    	the root object/element
.			@			the current object/element
/		. or []			child operator
..			n/a			parent operator
//			..			recursive descent. JSONPath borrows this syntax from E4X.
*			*			wildcard. All objects/elements regardless their names.
@			n/a			attribute access. JSON structures don't have attributes.
[]			[]			subscript operator. XPath uses it to iterate over element collections and for predicates. In Javascript and JSON it is the native array operator.
|			[,]			Union operator in XPath results in a combination of node sets. JSONPath allows alternate names or array indices as a set.
n/a	[start:end:step]	array slice operator borrowed from ES4.
[]			?()			applies a filter (script) expression.
n/a			()			script expression, using the underlying script engine.
()			n/a			grouping in Xpath



Wildcard operator in JSONPath:
---------------------------------
Wild card operator in JSONPath is *(Star or Asterisk) symbol. This is literally means everything under that node. 
For example, if you want to display the Data nodes of all the countries you can simple write following JSONPat

$.Countries[*].Data --> This will display the Data nodes of all the countries.

[
  {
    "Capital": "New Delhi",
    "mintemp": 6,
    "maxtemp": 45,
    "Currency": "Rupee"
  },
  {
    "Capital": "Katmandu",
    "mintemp": 9,
    "maxtemp": 23,
    "Currency": "Nepalese rupee"
  }
]

Array Index operator in JSONPath:
--------------------------------
Sometimes it is required to access a particular entry at a given index in the JSON array. 
We can use the Array Index [i,j,k… ]  to identify an entry at a particular index. 
In the above example, let us find out the last Country entry in the Countries array.

$.Countries[-1]

Here -1 stands for the last item in the Array. You can also refer to the last item by giving a positive value to the index. 
For e.g.

$.Countries[1]

[
  {
    "Country": "Nepal",
    "Data": {
      "Capital": "Katmandu",
      "mintemp": 9,
      "maxtemp": 23,
      "Currency": "Nepalese rupee"
    }
  }
]

Array index is just not limited to displaying only 1 item. We can extract multiple items from the array at different indexes. 
The syntax to do so is [i,j,k..].  For e.g. to extract the first 2 array items we will write the JSONPath as

$.Countries[0,1]

[
  {
    "Country": "India",
    "Data": {
      "Capital": "New Delhi",
      "mintemp": 6,
      "maxtemp": 45,
      "Currency": "Rupee"
    }
  },
  {
    "Country": "Nepal",
    "Data": {
      "Capital": "Katmandu",
      "mintemp": 9,
      "maxtemp": 23,
      "Currency": "Nepalese rupee"
    }
  }
]

Array slice operator in JsonPath:
---------------------------------
Array slice operator is wonderful operator to extract selected items from Json. 
Taking the example of books, what if we want to retrieve every alternative book in the Json. 
To do that we will need the Array Slice operator. 
Syntax of Array Slice operator is [StartIndex : EndIndex : Steps]. 
Let find out what are books at odd number in the books collection. 

{
  "store": {
    "book": [
      {
        "category": "reference",
        "author": "Nigel Rees",
        "title": "Sayings of the Century",
        "price": 8.95
      },
      {
        "category": "fiction",
        "author": "Evelyn Waugh",
        "title": "Sword of Honour",
        "price": 12.99
      },
      {
        "category": "fiction",
        "author": "Herman Melville",
        "title": "Moby Dick",
        "isbn": "0-553-21311-3",
        "price": 8.99
      },
      {
        "category": "fiction",
        "author": "J. R. R. Tolkien",
        "title": "The Lord of the Rings",
        "isbn": "0-395-19395-8",
        "price": 22.99
      }
    ],
    "bicycle": {
      "color": "red",
      "price": 19.95
    }
  },
  "expensive": 10
}

JsonPath will look like $..book[1,4,2]. It will return

[
      {
        "category": "fiction",
        "author": "Evelyn Waugh",
        "title": "Sword of Honour",
        "price": 12.99
      },
      {
        "category": "fiction",
        "author": "J. R. R. Tolkien",
        "title": "The Lord of the Rings",
        "isbn": "0-395-19395-8",
        "price": 22.99
      }
    ]

===============================================================================================================================

Q. What are expressions in JSONPath?
A. 
Usage of Expressions in JsonPath is a very good feature to have concise and complex JsonPaths. 
Expressions in JsonPath are basically code snippets that evaluate to the Boolean value. 
Based on the outcome only the nodes which meets the criteria are selected.

Expressions in JsonPath are one of the most powerful features of JsonPath.
Expressions help you create a condition which is evaluated to true or false.
There are two important symbols that you need before you can create Expressions in JsonPath.

? - question mark - denotes the begining of an expression.
@ - At symbol - denotes the current node being processed.

Eg. $.books[?(@.price < 100)]

Anything within the () is an expression.


{
  "books": [
    {
      "isbn": "9781593275846",
      "title": "Eloquent JavaScript, Second Edition",
      "subtitle": "A Modern Introduction to Programming",
      "author": "Marijn Haverbeke",
      "published": "2014-12-14T00:00:00.000Z",
      "publisher": "No Starch Press",
      "pages": 472,
      "description": "JavaScript lies at the heart of almost every modern web application, from social apps to the newest browser-based games. Though simple for beginners to pick up and play with, JavaScript is a flexible, complex language that you can use to build full-scale applications.",
      "website": "http://eloquentjavascript.net/"
    },
    {
      "isbn": "9781449331818",
      "title": "Learning JavaScript Design Patterns",
      "subtitle": "A JavaScript and jQuery Developer's Guide",
      "author": "Addy Osmani",
      "published": "2012-07-01T00:00:00.000Z",
      "publisher": "O'Reilly Media",
      "pages": 254,
      "description": "With Learning JavaScript Design Patterns, you'll learn how to write beautiful, structured, and maintainable JavaScript by applying classical and modern design patterns to the language. If you want to keep your code efficient, more manageable, and up-to-date with the latest best practices, this book is for you.",
      "website": "http://www.addyosmani.com/resources/essentialjsdesignpatterns/book/"
    },
    {
      "isbn": "9781449365035",
      "title": "Speaking JavaScript",
      "subtitle": "An In-Depth Guide for Programmers",
      "author": "Axel Rauschmayer",
      "published": "2014-02-01T00:00:00.000Z",
      "publisher": "O'Reilly Media",
      "pages": 460,
      "description": "Like it or not, JavaScript is everywhere these days-from browser to server to mobile-and now you, too, need to learn the language or dive deeper than you have. This concise book guides you into and through JavaScript, written by a veteran programmer who once found himself in the same position.",
      "website": "http://speakingjs.com/"
    },
    {
      "isbn": "9781491950296",
      "title": "Programming JavaScript Applications",
      "subtitle": "Robust Web Architecture with Node, HTML5, and Modern JS Libraries",
      "author": "Eric Elliott",
      "published": "2014-07-01T00:00:00.000Z",
      "publisher": "O'Reilly Media",
      "pages": 254,
      "description": "Take advantage of JavaScript's power to build robust web-scale or enterprise applications that are easy to extend and maintain. By applying the design patterns outlined in this practical book, experienced JavaScript developers will learn how to write flexible and resilient code that's easier-yes, easier-to work with as your code base grows.",
      "website": "http://chimera.labs.oreilly.com/books/1234000000262/index.html"
    },
    {
      "isbn": "9781593277574",
      "title": "Understanding ECMAScript 6",
      "subtitle": "The Definitive Guide for JavaScript Developers",
      "author": "Nicholas C. Zakas",
      "published": "2016-09-03T00:00:00.000Z",
      "publisher": "No Starch Press",
      "pages": 352,
      "description": "ECMAScript 6 represents the biggest update to the core of JavaScript in the history of the language. In Understanding ECMAScript 6, expert developer Nicholas C. Zakas provides a complete guide to the object types, syntax, and other exciting changes that ECMAScript 6 brings to JavaScript.",
      "website": "https://leanpub.com/understandinges6/read"
    },
    {
      "isbn": "9781491904244",
      "title": "You Don't Know JS",
      "subtitle": "ES6 & Beyond",
      "author": "Kyle Simpson",
      "published": "2015-12-27T00:00:00.000Z",
      "publisher": "O'Reilly Media",
      "pages": 278,
      "description": "No matter how much experience you have with JavaScript, odds are you don’t fully understand the language. As part of the 'You Don’t Know JS' series, this compact guide focuses on new features available in ECMAScript 6 (ES6), the latest version of the standard upon which JavaScript is built.",
      "website": "https://github.com/getify/You-Dont-Know-JS/tree/master/es6%20&%20beyond"
    },
    {
      "isbn": "9781449325862",
      "title": "Git Pocket Guide",
      "subtitle": "A Working Introduction",
      "author": "Richard E. Silverman",
      "published": "2013-08-02T00:00:00.000Z",
      "publisher": "O'Reilly Media",
      "pages": 234,
      "description": "This pocket guide is the perfect on-the-job companion to Git, the distributed version control system. It provides a compact, readable introduction to Git for new users, as well as a reference to common commands and procedures for those of you with Git experience.",
      "website": "http://chimera.labs.oreilly.com/books/1230000000561/index.html"
    },
    {
      "isbn": "9781449337711",
      "title": "Designing Evolvable Web APIs with ASP.NET",
      "subtitle": "Harnessing the Power of the Web",
      "author": "Glenn Block, et al.",
      "published": "2014-04-07T00:00:00.000Z",
      "publisher": "O'Reilly Media",
      "pages": 538,
      "description": "Design and build Web APIs for a broad range of clients—including browsers and mobile devices—that can adapt to change over time. This practical, hands-on guide takes you through the theory and tools you need to build evolvable HTTP services with Microsoft’s ASP.NET Web API framework. In the process, you’ll learn how design and implement a real-world Web API.",
      "website": "http://chimera.labs.oreilly.com/books/1234000001708/index.html"
    }
  ]
}

Find out all the books that have pages greater than 460. Refer to the above json.

jsonPath will be - $.books
expression will be  - ?(@.pages > 460)

hence the json query for array of books will be the jsonpath+expression:  $.books[?(@.pages > 460)]. The result will be:

[
  {
    "isbn": "9781593275846",
    "title": "Eloquent JavaScript, Second Edition",
    "subtitle": "A Modern Introduction to Programming",
    "author": "Marijn Haverbeke",
    "published": "2014-12-14T00:00:00.000Z",
    "publisher": "No Starch Press",
    "pages": 472,
    "description": "JavaScript lies at the heart of almost every modern web application, from social apps to the newest browser-based games. Though simple for beginners to pick up and play with, JavaScript is a flexible, complex language that you can use to build full-scale applications.",
    "website": "http://eloquentjavascript.net/"
  },
  {
    "isbn": "9781449337711",
    "title": "Designing Evolvable Web APIs with ASP.NET",
    "subtitle": "Harnessing the Power of the Web",
    "author": "Glenn Block, et al.",
    "published": "2014-04-07T00:00:00.000Z",
    "publisher": "O'Reilly Media",
    "pages": 538,
    "description": "Design and build Web APIs for a broad range of clients—including browsers and mobile devices—that can adapt to change over time. This practical, hands-on guide takes you through the theory and tools you need to build evolvable HTTP services with Microsoft’s ASP.NET Web API framework. In the process, you’ll learn how design and implement a real-world Web API.",
    "website": "http://chimera.labs.oreilly.com/books/1234000001708/index.html"
  }
]

In place of '>' greater than sign, JSON accepts other logical operators like <, ==, <=, >=, !=.


===============================================================================================================================

Q. How to deserialize a JSON array to a List in Java?
A.
JSONPath can be used to make a deterministic and accurate search in the Response JSON. 
We can perform advance search in the Response JSON by Deserialize JSON Array to List.

JsonPath class has two overloaded methods:
* JsonPath.getList(String) method lets us get the searched nodes as a List of String
* JsonPath.getList(String, Class T) method let us get the searched nodes as a List of T type

JsonPath.getList(String)
--------------------------
To understand JsonPath.getList(String) method we will try to retrieve all the books as a List of String (List<String>). 
All we need to do is give “books” as the JSONPath.

Code:

@Test
public void JsonPathUsage() throws MalformedURLException
{
	RestAssured.baseURI = "http://restapi.demoqa.com/utilities/books/getallbooks";
	RequestSpecification httpRequest = RestAssured.given();
	Response response = httpRequest.get("");

	// First get the JsonPath object instance from the Response interface
	JsonPath jsonPathEvaluator = response.jsonPath();

	// Read all the books as a List of String. Each item in the list
	// represent a book node in the REST service Response
	List<String> allBooks = jsonPathEvaluator.getList("books.title");

	// Iterate over the list and print individual book item
	for(String book : allBooks)
	{
		System.out.println("Book: " + book);
	}
}

Output:
Book: Eloquent JavaScript, Second Edition
Book: Learning JavaScript Design Patterns
Book: Speaking JavaScript
Book: Programming JavaScript Applications
Book: Understanding ECMAScript 6
Book: You Don't Know JS
Book: Git Pocket Guide
Book: Designing Evolvable Web APIs with ASP.NET

JsonPath.getList(String, Class T)
---------------------------------

Retrieve all the books from the JSON response. We will retrieve all the books as a List of Books class. 
In order to do this we will first create a Class Representation of a Book. 
Get all the properties of JSON Book entity and create a class with those member variables. 
A book can be simply represent by a POJO class as shown in the code below.

public class Book {

    String isbn;
    String title;
    String subtitle;
    String author;
    String published;
    String publisher;
    int pages;
    String description;
    String website;
}

Now to get the response converted into a List of Books we will simply use the JsonPath.getList(String, Class T) method.
* First parameter is the JSONPath (“books”) in this case
* Second parameter is the Type name to which we want the response to be converted. Book class in this case.

@Test
public void JsonPathUsage() throws MalformedURLException
{
	RestAssured.baseURI = "http://restapi.demoqa.com/utilities/books/getallbooks";
	RequestSpecification httpRequest = RestAssured.given();
	Response response = httpRequest.get("");

	// First get the JsonPath object instance from the Response interface
	JsonPath jsonPathEvaluator = response.jsonPath();

	// Read all the books as a List of String. Each item in the list
	// represent a book node in the REST service Response
	List<Book> allBooks = jsonPathEvaluator.getList("books", Book.class);

	// Iterate over the list and print individual book item
	// Note that every book entry in the list will be complete Json object of book
	for(Book book : allBooks)
	{
		System.out.println("Book: " + book.title);
	}
}


===============================================================================================================================

Q. How to deserialize a JSON array to an Array in Java?
A.

JsonPath class has method called getObject. 
This method can be used to convert the response directly into a Java Array of Book. 
The only thing the we need to do is pass Book[].class as the second argument to the method to signify 
that we want the Json to be deserialized into an Array of Book. 

Here is the code that will do this.

@Test
public void JsonArrayToArray()
{

	RestAssured.baseURI = "http://restapi.demoqa.com/utilities/books/getallbooks";
	RequestSpecification request = RestAssured.given();

	Response response = request.get();
	System.out.println("Response Body -> " + response.body().asString());

	// We can convert the Json Response directly into a Java Array by using
	// JsonPath.getObject method. Here we have to specify that we want to
	// deserialize the Json into an Array of Book. This can be done by specifying
	// Book[].class as the second argument to the getObject method.
	Book[] books = response.jsonPath().getObject("books",Book[].class );

	for(Book book : books)
	{
		System.out.println("Book title " + book.title);
	}
}