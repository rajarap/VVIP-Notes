Constructors in Java:
-----------------------------
1. Whenever we create an object, we should compulsarily perform initialization of the instance members, for the object to respond properly.
2. Whenever we creat an object, some piece of code will be executed automatically which performs initialization of the instance members of the class. This piece
of code is called the constructor.(constructing an object).
3. The main objective of the constructor is to perform initialization for the newly created object.

Refer part1 - 229

Differnce between instance block vs constructor:
------------------------------------------------
1. At the time of object creation, if we want to initialize the instance variables, we should go for constructor.
2. Other than initialization activity, if we want to perform any other activity at the time of object creation we should go for instance block.
3. Constructors cannot be replaced with instance blocks, as constructors can take arguments where as instance blocks cannot take arguments.
4. Similarliy, instance blocks cannot be replaced with constructors.  A class can contain any number of constructors. If you replace an instance block with 
constructor then in every constructor we have to write instance block code, because, at runtime, we will not know which constuctor will be called.  This results
in code duplication and causes maintenance issues.

Rules for defining a constructor:
-----------------------------------
1. The name of constructor should be same as the name of the class.
2. Constructors dont return anything.  Not even void.  By mistake, if we specify void or any return type, no compile time error or runtime error will be thrown.
Instead it will be treated as a normal method and not a constructor.  
3. Name of a method can be same as the class name, but it is not good programming practice.
4. The only modifiers applicable for constructors are public, private, protected, default.  If any other  modifiers are specified, we will get CE: modifier xxx not
allowed here.  xxx - strictfp, final, static


Default construtor:
-----------------------
1. If we dont provide any constructor, the compiler(not JVM), compiler will generate default constructor.
2. If we provide atlease one constructor, the compiler will not generate any default constructor.
3. Hence a class can contain either programmer provided constructor or compiler generated constructor, but not both.

Rules for Default constructor generated by compiler:
----------------------------------------------------
1. Default constructor must always be no argument constructor.
2. The access modifier of a default constructor should be same as that of a class modifier. but this rule is applicable only for public and default.
3. Default constructor generated by compiler must contain only one line. It should be a no argument call to the super class constructor.

Test()
{
	super();
}

Refer to part1 - 236 or various combinations of default constructor.

Constructor overloading:
----------------------------
1. A class can contain more than one constructor with same name, but with different arguments. These constructors are called overloaded constructors.
2. Inheritace and overridding concepts are not applicable for constructors.  Every class should have its own  constructors with the corresponding class name.
3. Abstract classes can also contain construtors.
4. Interfaces cannot contain constructors.
5. Recursive method call is a runtime error, where as recursive constructor call is a compile time error.
Eg. 
1. If a normal method m1() calls m2() and m2() calls m1(), during runtime the stack will be filled up with m1() and m2() method calls and will 
finally throw runtime exception "Stack overflow" error.
2. As per below Eg:, there is a recursive constructor call. This recursive constructor call will throw CE:Recursive constructor error.
Eg: 
class Test
{
	Test()
	{
		this(10);
	}
	
	Test(int i)
	{
		this();
	}
}
6. Whenever a parent class contains constructors, special care should be taken when creating child class of such parent classes.
7. If the parent class contains constructors with arguments, it is highly recommended to also add a constructor that does not take any arguments.  If parent 
class contains only constructors with arguments, the CE: will be thrown in child class.
8. If parent class constructor throws checked exception, then compulsarily, the child class construtor should also throw the same check exception or its parent 
exception, other wise the code will not compile.

